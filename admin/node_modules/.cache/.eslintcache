[{"E:\\FCB\\admin\\src\\index.js":"1","E:\\FCB\\admin\\src\\App.js":"2","E:\\FCB\\admin\\src\\AuthProvider.jsx":"3","E:\\FCB\\admin\\src\\Engine.jsx":"4","E:\\FCB\\admin\\src\\ScrollToTop.jsx":"5","E:\\FCB\\admin\\src\\firebase.js":"6","E:\\FCB\\admin\\src\\pages\\Account.jsx":"7","E:\\FCB\\admin\\src\\pages\\Orders.jsx":"8","E:\\FCB\\admin\\src\\pages\\Admins.jsx":"9","E:\\FCB\\admin\\src\\pages\\Users.jsx":"10","E:\\FCB\\admin\\src\\pages\\dashboard.jsx":"11","E:\\FCB\\admin\\src\\pages\\Products.jsx":"12","E:\\FCB\\admin\\src\\components\\Navbar.jsx":"13","E:\\FCB\\admin\\src\\pages\\auth\\ForgotPassword.jsx":"14","E:\\FCB\\admin\\src\\pages\\auth\\Login.jsx":"15","E:\\FCB\\admin\\src\\pages\\auth\\Register.jsx":"16","E:\\FCB\\admin\\src\\pages\\forms\\AddProducts.jsx":"17"},{"size":234,"mtime":1732789807877,"results":"18","hashOfConfig":"19"},{"size":435,"mtime":1732789807830,"results":"20","hashOfConfig":"19"},{"size":3056,"mtime":1732789807846,"results":"21","hashOfConfig":"19"},{"size":5104,"mtime":1732789807846,"results":"22","hashOfConfig":"19"},{"size":316,"mtime":1732789807893,"results":"23","hashOfConfig":"19"},{"size":776,"mtime":1735795578344,"results":"24","hashOfConfig":"19"},{"size":10635,"mtime":1732789808003,"results":"25","hashOfConfig":"19"},{"size":21101,"mtime":1732789808035,"results":"26","hashOfConfig":"19"},{"size":11766,"mtime":1732789808003,"results":"27","hashOfConfig":"19"},{"size":9052,"mtime":1732789808050,"results":"28","hashOfConfig":"19"},{"size":5870,"mtime":1732789808019,"results":"29","hashOfConfig":"19"},{"size":17571,"mtime":1732789808050,"results":"30","hashOfConfig":"19"},{"size":3466,"mtime":1732802484311,"results":"31","hashOfConfig":"19"},{"size":3104,"mtime":1732789808066,"results":"32","hashOfConfig":"19"},{"size":7966,"mtime":1735796425607,"results":"33","hashOfConfig":"19"},{"size":5307,"mtime":1732791578043,"results":"34","hashOfConfig":"19"},{"size":6144,"mtime":1732789808113,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"hby9xj",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"39"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"39"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"39"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"39"},"E:\\FCB\\admin\\src\\index.js",[],[],["100","101","102","103","104","105"],"E:\\FCB\\admin\\src\\App.js",["106","107"],[],"import React, { useEffect } from 'react';\nimport './App.css';\nimport './Theme.css';\nimport Engine from './Engine';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport AuthProvider from './AuthProvider';\nimport ScrollToTop from './ScrollToTop';\n\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <ScrollToTop />\n        <AuthProvider />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","E:\\FCB\\admin\\src\\AuthProvider.jsx",["108","109","110","111","112","113"],[],"import React, { useEffect, useState } from 'react'\r\n\r\n\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { auth, db } from './firebase';\r\nimport { get, onValue, ref } from 'firebase/database';\r\nimport Login from './pages/auth/Login';\r\nimport Engine from './Engine';\r\nimport ForgotPassword from './pages/auth/ForgotPassword';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nconst AuthProvider = () => {\r\n    const [loggedindetails, setloggedindetails] = useState(null);\r\n    const [loggedinuid, setloggedinuid] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            Swal.fire({\r\n                html: `\r\n                  <div class=\"p-5\">\r\n                    <div class=\"spinner-border text-dark\" role=\"status\">\r\n                      <span class=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                  </div>\r\n                `,\r\n                showConfirmButton: false,\r\n                background: 'transparent',\r\n                timer: 3000\r\n            });\r\n            if (user) {\r\n\r\n                const uid = user.uid;\r\n                const userRef = ref(db, 'admins/' + uid);\r\n\r\n\r\n                get(userRef)\r\n                    .then((snapshot) => {\r\n                        if (snapshot.exists()) {\r\n                            setloggedinuid(uid);\r\n                            const userData = snapshot.val();\r\n\r\n                            setloggedindetails(userData);\r\n                            setcomponent(\"Engine\");\r\n\r\n                        } else {\r\n                            setloggedindetails(null);\r\n                            setcomponent(\"Login\");\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error fetching Realtime Database data:', error);\r\n                    });\r\n            } else {\r\n                setloggedindetails(null);\r\n                setcomponent(\"Login\");\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const [component, setcomponent] = useState(\"Login\")\r\n\r\n    const render = () => {\r\n        switch (component) {\r\n            case \"Login\":\r\n                return <Login componentrender={componentrender} />;\r\n            case \"Engine\":\r\n                return <Engine />;\r\n            case \"ForgotPassword\":\r\n                return <ForgotPassword componentrender={componentrender} />;\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const [currentproduct, setcurrentproduct] = useState(\"Interior\")\r\n\r\n    const fitcomponent = (value1, value2) => {\r\n        setcomponent(value1)\r\n        setcurrentproduct(value2)\r\n    }\r\n\r\n\r\n\r\n\r\n    const componentrender = (componentName) => {\r\n        setcomponent(componentName);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=''>\r\n\r\n            <div></div>\r\n            <div>\r\n                {render()}\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthProvider","E:\\FCB\\admin\\src\\Engine.jsx",["114","115","116"],[],"import React, { useEffect, useState } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Account from './pages/Account';\r\nimport ScrollToTop from './ScrollToTop';\r\nimport Products from './pages/Products';\r\nimport Orders from './pages/Orders';\r\nimport Users from './pages/Users';\r\nimport Admins from './pages/Admins';\r\nimport Dashboard from './pages/dashboard';\r\n\r\nconst Engine = () => {\r\n    const [component, setComponent] = useState(\"Dashboard\");\r\n\r\n    const render = () => {\r\n        switch (component) {\r\n            case \"Products\":\r\n                return <Products />;\r\n            case \"Orders\":\r\n                return <Orders />;\r\n            case \"Users\":\r\n                return <Users />;\r\n            case \"Admins\":\r\n                return <Admins />;\r\n            case \"Profile\":\r\n                return <Account />;\r\n            case \"Dashboard\": // Render the Dashboard component when selected\r\n                return <Dashboard />;\r\n        }\r\n    };\r\n\r\n    const componentrender = (componentName) => {\r\n        setComponent(componentName);\r\n    };\r\n\r\n    return (\r\n        <div className='container-fluid z'>\r\n\r\n            <div className='row'>\r\n                <div className='col-12 col-lg-2 d-lg-block d-none'>\r\n                    <div>\r\n                        <Navbar componentrender={componentrender} component={component} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className='col-12 col-lg-10'>\r\n                    <div className='mt-lg-4 container mt-5 pt-3'>\r\n                        {render()}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"d-lg-none d-block\">\r\n\r\n\r\n                    <nav className=\"navbar text-bg-white fixed-top\">\r\n                        <div className=\"container-fluid\">\r\n                            <div>\r\n                                <img className=\"\" src=\"Images/logo2.png\" width=\"150px\" alt=\"Logo\" />\r\n                            </div>\r\n                            <div className='d-flex flex-row justify-content-center'>\r\n                                <h5 className=\"text-coral\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasDarkNavbar\" aria-controls=\"offcanvasDarkNavbar\" aria-label=\"Toggle navigation\">\r\n                                    <span className=\"navbar-toggler-icon\"></span>\r\n                                </h5>\r\n                            </div>\r\n\r\n                            <div className=\"offcanvas offcanvas-end text-bg-white w-100\" tabIndex=\"-1\" id=\"offcanvasDarkNavbar\" aria-labelledby=\"offcanvasDarkNavbarLabel\">\r\n                                <div className=\"offcanvas-header\">\r\n                                    <img className=\"\" src=\"Images/logo2.png\" width=\"150px\" alt=\"Logo\" />\r\n                                    <button type=\"button\" className=\"btn-close btn-close-dark\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div className=\"offcanvas-body\">\r\n                                    <ul className=\"navbar-nav justify-content-end gap-3 flex-grow-1 pe-3\">\r\n\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={` ${component === 'Dashboard' ? 'text-coral' : ''}`} onClick={() => componentrender('Dashboard')}>\r\n                                            Dashboard\r\n                                        </h5>\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={`nav-item ${component === 'Products' ? 'text-coral' : ''}`} onClick={() => componentrender('Products')}>\r\n                                            Products\r\n                                        </h5>\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={` ${component === 'Orders' ? 'text-coral' : ''}`} onClick={() => componentrender('Orders')}>\r\n                                            Orders\r\n                                        </h5>\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={` ${component === 'Users' ? 'text-coral' : ''}`} onClick={() => componentrender('Users')}>\r\n                                            Users\r\n                                        </h5>\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={` ${component === 'Admins' ? 'text-coral' : ''}`} onClick={() => componentrender('Admins')}>\r\n                                            Admins\r\n                                        </h5>\r\n                                        <h5 data-bs-dismiss=\"offcanvas\" className={` ${component === 'Profile' ? 'text-coral' : ''}`} onClick={() => componentrender('Profile')}>\r\n                                            Profile\r\n                                        </h5>\r\n\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Engine;\r\n","E:\\FCB\\admin\\src\\ScrollToTop.jsx",[],[],"E:\\FCB\\admin\\src\\firebase.js",[],[],"E:\\FCB\\admin\\src\\pages\\Account.jsx",[],[],"E:\\FCB\\admin\\src\\pages\\Orders.jsx",["117","118","119","120","121","122","123","124"],[],"import React, { useEffect, useState } from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport { db, storage } from '../firebase';\r\nimport { child, get, ref, remove, update } from 'firebase/database';\r\nimport Swal from 'sweetalert2';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Orders = () => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [selectedRowData, setSelectedRowData] = useState(null);\r\n  const [isOrderedItemsModalOpen, setOrderedItemsModalOpen] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(new Date());\r\n\r\n\r\n  const openModal = (rowData) => {\r\n    setSelectedRowData(rowData);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const generateExcelReport = (startDate, endDate) => {\r\n    // Convert start and end dates to Date objects\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n\r\n    // Ensure end date is set to end of the day to include all records on that day\r\n    end.setHours(23, 59, 59, 999);\r\n\r\n    // Filter tableData based on the selected time period\r\n    const filteredOrders = tableData.filter(order => {\r\n      const orderDate = new Date(order.orderDate);\r\n      return orderDate >= start && orderDate <= end;\r\n    });\r\n\r\n    // Prepare data for the Excel report\r\n    const excelData = filteredOrders.map(order => ({\r\n      'Order Date': order.orderDate,\r\n      'UID': order.uid,\r\n      'Order Status': order.orderstatus,\r\n      'Payment Method': order.paymentMethod,\r\n      'Price': order.total,\r\n      'Grand Total': order.grandTotal\r\n      // Add more fields as needed\r\n    }));\r\n\r\n    // Convert data to Excel format\r\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Orders');\r\n\r\n    // Save Excel file\r\n    XLSX.writeFile(workbook, 'orders_report.xlsx');\r\n  };\r\n\r\n\r\n  const formatDate = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n\r\n\r\n  const [selectedType, setSelectedType] = useState('');\r\n\r\n  useEffect(() => {\r\n\r\n    const dataRef = ref(db, '/orders');\r\n    get(dataRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const dataObject = snapshot.val();\r\n          const dataKeys = Object.keys(dataObject);\r\n          const dataEntries = dataKeys.map((key) => ({\r\n            key,\r\n            ...dataObject[key],\r\n          }));\r\n          dataEntries.sort((a, b) => a.rank - b.rank);\r\n          setTableData(dataEntries);\r\n          setFilteredData(dataEntries);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n  const getproducts = () => {\r\n    Swal.fire({\r\n      html: `\r\n        <div className=\"\" >\r\n          <div className=\"spinner-border text-dark\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n      showConfirmButton: false,\r\n      background: 'transparent',\r\n      timer: 3000\r\n    });\r\n    const dataRef = ref(db, '/orders');\r\n    get(dataRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const dataObject = snapshot.val();\r\n          const dataKeys = Object.keys(dataObject);\r\n          const dataEntries = dataKeys.map((key) => ({\r\n            key,\r\n            ...dataObject[key],\r\n          }));\r\n          dataEntries.sort((a, b) => a.rank - b.rank);\r\n          setTableData(dataEntries);\r\n          setFilteredData(dataEntries); // Initially, set filteredData to all data\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }\r\n\r\n\r\n  const updateOrderStatus = (orderKey, newStatus) => {\r\n    const orderRef = ref(db, `orders/${orderKey}`);\r\n\r\n    // Update the order status in the Realtime Database\r\n    update(orderRef, { orderstatus: newStatus })\r\n      .then(() => {\r\n        // Update the state with the latest orders\r\n        getproducts();\r\n\r\n        // Show a success message (you can customize this part)\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Order status updated successfully!',\r\n          showConfirmButton: true,\r\n          timer: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // Show an error message (you can customize this part)\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error updating order status',\r\n          showConfirmButton: true,\r\n          timer: 3000,\r\n        });\r\n\r\n        console.error('Error updating order status:', error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  // Usage in your component\r\n  // Replace 'Processing', 'Delivered', 'Shipped', 'Cancelled' with the actual statuses you have in your data\r\n  const handleStatusChange = (orderKey, newStatus) => {\r\n    Swal.fire({\r\n      title: `Are you sure you want to set the order status to ${newStatus}?`,\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#007BFF',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, update status!',\r\n      cancelButtonText: 'Cancel',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Call the updateOrderStatus function with the selected status\r\n        updateOrderStatus(orderKey, newStatus);\r\n      }\r\n    });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Order Date',\r\n      selector: 'orderDate',\r\n    },\r\n    {\r\n      name: 'UID',\r\n      selector: 'uid',\r\n    },\r\n    {\r\n      name: 'Order Status',\r\n      selector: 'orderstatus',\r\n      cell: (row) => (\r\n        <div className='d-flex flex-row py-2'>\r\n          <div className='dropdown dropend'>\r\n            <button\r\n              className='btn btn-secondary dropdown-toggle'\r\n              type='button'\r\n              id='statusDropdown'\r\n              data-bs-toggle='dropdown'\r\n              aria-expanded='false'\r\n            >\r\n              {row.orderstatus}\r\n            </button>\r\n            <ul className='dropdown-menu' aria-labelledby='statusDropdown'>\r\n              <li className='d-flex'>\r\n                <button\r\n                  className='dropdown-item'\r\n                  onClick={() => handleStatusChange(row.key, 'Processing')}\r\n                >\r\n                  Processing\r\n                </button>\r\n              </li>\r\n              <li className='d-flex'>\r\n                <button\r\n                  className='dropdown-item'\r\n                  onClick={() => handleStatusChange(row.key, 'Delivered')}\r\n                >\r\n                  Delivered\r\n                </button>\r\n              </li>\r\n              <li className='d-flex'>\r\n                <button\r\n                  className='dropdown-item'\r\n                  onClick={() => handleStatusChange(row.key, 'Shipped')}\r\n                >\r\n                  Shipped\r\n                </button>\r\n              </li>\r\n              <li className='d-flex'>\r\n                <button\r\n                  className='dropdown-item'\r\n                  onClick={() => handleStatusChange(row.key, 'Cancelled')}\r\n                >\r\n                  Cancelled\r\n                </button>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Payment Method',\r\n      selector: 'paymentMethod',\r\n    },\r\n\r\n    // {\r\n    //   name: 'Quantity',\r\n    //   selector: 'items',\r\n    //   sortable: true,\r\n    //   cell: (row) => (\r\n    //     <div>\r\n    //       {row.items && row.items.length}\r\n    //     </div>\r\n    //   ),\r\n    // },\r\n\r\n    // {\r\n    //   // Empty column for spacing\r\n    //   name: '',\r\n    //   selector: '',\r\n    //   cell: () => <div style={{ width: '10px' }}></div>,\r\n    // },\r\n\r\n    {\r\n      name: 'Price',\r\n      selector: (row) => `₹ ${row.total}`,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Grand Total', // New column for displaying price after GST\r\n      selector: (row) => `₹ ${row.grandTotal}`,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Ordered Items',\r\n      cell: (row) => (\r\n        <div className='d-flex flex-row'>\r\n          <i className='bi bi-cart-fill px-4' onClick={() => openOrderedItemsModal(row)}></i>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Order Info',\r\n      cell: (row) => (\r\n        <div className='d-flex flex-row'>\r\n          <i className='bi bi-eye-fill px-3' onClick={() => openModal(row)}></i>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const paginationOptions = {\r\n    rowsPerPageText: 'Rows per page:',\r\n    rangeSeparatorText: 'of',\r\n  };\r\n\r\n  const calculatePriceAfterGST = (price) => {\r\n    // Perform GST calculation here, assuming GST rate is 18%\r\n    const GST_RATE = 0.18;\r\n    const priceAfterGST = price * (1 + GST_RATE);\r\n    return priceAfterGST.toFixed(2); // Round to 2 decimal places\r\n  };\r\n\r\n  const handleSearch = (searchQuery, selectedType) => {\r\n    let filteredItems = tableData;\r\n\r\n    if (searchQuery) {\r\n      filteredItems = filteredItems.filter((item) =>\r\n        item.orderDate.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (selectedType) {\r\n      filteredItems = filteredItems.filter((item) =>\r\n        item.type.toLowerCase() === selectedType.toLowerCase()\r\n      );\r\n    }\r\n\r\n    setFilteredData(filteredItems);\r\n  };\r\n\r\n  const openOrderedItemsModal = (rowData) => {\r\n    setSelectedRowData(rowData);\r\n    setOrderedItemsModalOpen(true);\r\n  };\r\n\r\n\r\n  const [userDetails, setUserDetails] = useState(null);\r\n\r\n  // Function to fetch and set user details\r\n  const fetchUserDetails = async (uid) => {\r\n    const userRef = ref(db, `users/${uid}/profile`);\r\n\r\n    try {\r\n      const snapshot = await get(userRef);\r\n      if (snapshot.exists()) {\r\n        const userData = snapshot.val();\r\n        // Set user details in state\r\n        setUserDetails(userData);\r\n      } else {\r\n        setUserDetails(null); // Set to null if user details not found\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user details:', error);\r\n      setUserDetails(null); // Set to null in case of an error\r\n    }\r\n  };\r\n\r\n  // useEffect to fetch user details when modal is opened\r\n  useEffect(() => {\r\n    if (isModalOpen && selectedRowData && selectedRowData.uid) {\r\n      fetchUserDetails(selectedRowData.uid);\r\n    }\r\n  }, [isModalOpen, selectedRowData]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className='sticky-top'>\r\n        <div className='d-flex flex-row justify-content-between'>\r\n          <div className='fw-bold'>\r\n            Orders\r\n          </div>\r\n          {/* <button className=\"btn btn-secondary\" onClick={generateExcelReport}>Download Report</button> */}\r\n          <div>\r\n            <label style={{ marginRight: '10px', paddingRight: '5px' }}>Start Date</label>\r\n            <input\r\n              type=\"date\"\r\n              value={startDate}\r\n              onChange={(e) => setStartDate(e.target.value)}\r\n              style={{\r\n                marginRight: '10px',\r\n                border: '1px solid #ccc',\r\n                padding: '8px',\r\n                borderRadius: '4px',\r\n                outline: 'none'\r\n              }}\r\n            />\r\n\r\n            <label style={{ marginRight: '10px', paddingRight: '5px' }}>End Date</label>\r\n            <input\r\n              type=\"date\"\r\n              value={endDate}\r\n              onChange={(e) => setEndDate(e.target.value)}\r\n              style={{\r\n                marginRight: '10px',\r\n                border: '1px solid #ccc',\r\n                padding: '8px',\r\n                borderRadius: '4px',\r\n                outline: 'none'\r\n              }}\r\n            />\r\n\r\n            <button onClick={() => generateExcelReport(startDate, endDate)} style={{ padding: '8px 16px', backgroundColor: '#000', color: '#fff', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>Download Report</button>\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n        <div className=\"container mt-4 mb-2\">\r\n          <div className='row'>\r\n            <div className='col-md-6'>\r\n              <div className='input-group'>\r\n                <span className='input-group-text'><i className='bi bi-search'></i></span>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search order date...\"\r\n                  className='form-control'\r\n                  value={searchText}\r\n                  onChange={(e) => {\r\n                    setSearchText(e.target.value);\r\n                    handleSearch(e.target.value, selectedType);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='container mt-4 mb-2'>\r\n        <div className='row'>\r\n          <div className='col-md-12'>\r\n            <div style={{ overflowX: 'auto', height: \"70vh\" }}>\r\n              <DataTable\r\n                className=\"table table-bordered table-striped \"\r\n                columns={columns}\r\n                data={filteredData}\r\n                pagination\r\n                paginationComponentOptions={paginationOptions}\r\n                highlightOnHover\r\n                pointerOnHover\r\n                striped\r\n                paginationRowsPerPageOptions={[10, 25, 50, 100]}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal for displaying ordered items */}\r\n      {isOrderedItemsModalOpen && selectedRowData && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(3px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\">\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      Ordered Items\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => setOrderedItemsModalOpen(false)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div className='table-responsive'>\r\n                    <table className='table table-bordered'>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Product ID</th>\r\n                          <th>Product Name</th>\r\n                          <th>Quantity</th>\r\n                          {/* Add more headers as needed */}\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {selectedRowData.items.map((item, index) => (\r\n                          <tr key={index}>\r\n                            <td>{item.productID}</td>\r\n                            <td>{item.productName}</td>\r\n                            <td>{item.quantity}</td>\r\n                            {/* Add more cells as needed */}\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n      {isModalOpen && selectedRowData && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(3px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\">\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      Order Info\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => setModalOpen(false)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div>\r\n                    <div className='container border px-3 rounded-3'>\r\n                      <div className='row'>\r\n                        <div className='col-md-12 d-flex flex-row justify-content-center pb-3'>\r\n                          <img className='img-fluid' src={selectedRowData.imageURL} width={200} loading='lazy' />\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product ID:</label>\r\n                          <p> {selectedRowData.key}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>User ID</label>\r\n                          <p> {selectedRowData.uid}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Order ID:</label>\r\n                          <p> {selectedRowData.key}</p>\r\n                        </div>\r\n\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product Price:</label>\r\n                          <p> {selectedRowData.total}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Grand Total:</label>\r\n                          <p> ₹ {selectedRowData.grandTotal}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Payment Method :</label>\r\n                          <p> {selectedRowData.paymentMethod}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Order Status:</label>\r\n                          <p> {selectedRowData.orderstatus}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Order Date:</label>\r\n                          <p> {selectedRowData.orderDate}</p>\r\n                        </div>\r\n\r\n                        <hr></hr>\r\n\r\n                        <div className='container  px-3 '>\r\n                          <div className='row '>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>First Name:</label>\r\n                              <p> {selectedRowData.address.firstName}</p>\r\n                            </div>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>Last Name:</label>\r\n                              <p> {selectedRowData.address.lastName}</p>\r\n                            </div>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>Address:</label>\r\n                              <p> {selectedRowData.address.address}</p>\r\n                            </div>\r\n\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>City:</label>\r\n                              <p> {selectedRowData.address.city}</p>\r\n                            </div>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>State:</label>\r\n                              <p> {selectedRowData.address.state}</p>\r\n                            </div>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>Pincode:</label>\r\n                              <p> {selectedRowData.address.pincode}</p>\r\n                            </div>\r\n                            <div className='col-md-6'>\r\n                              <label className='fw-bold'>Phone:</label>\r\n                              <p> {selectedRowData.address.phone}</p>\r\n                            </div>\r\n\r\n                          </div>\r\n                        </div>\r\n\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Orders\r\n","E:\\FCB\\admin\\src\\pages\\Admins.jsx",["125","126","127","128","129","130","131"],[],"import React, { useEffect, useState } from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport AddProducts from './forms/AddProducts';\r\nimport { db, storage } from '../firebase';\r\nimport { child, get, ref, remove, update } from 'firebase/database';\r\nimport { deleteObject, ref as reference } from 'firebase/storage';\r\nimport Swal from 'sweetalert2';\r\nimport Register from './auth/Register';\r\n\r\nconst Admins = () => {\r\n\r\n    const [tableData, setTableData] = useState([]);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const [selectedRowData, setSelectedRowData] = useState(null);\r\n    const [addadmin, setaddadmin] = useState(false)\r\n\r\n\r\n    const openModal = (rowData) => {\r\n        setSelectedRowData(rowData);\r\n        setModalOpen(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const dataRef = ref(db, '/admins');\r\n        get(dataRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const dataObject = snapshot.val();\r\n                    const dataKeys = Object.keys(dataObject);\r\n                    const dataEntries = dataKeys.map((key) => ({\r\n                        key,\r\n                        ...dataObject[key],\r\n                    }));\r\n                    dataEntries.sort((a, b) => a.rank - b.rank);\r\n                    setTableData(dataEntries);\r\n                    setFilteredData(dataEntries); // Initially, set filteredData to all data\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, []);\r\n\r\n\r\n\r\n    const getproducts = () => {\r\n\r\n        Swal.fire({\r\n            html: `\r\n        <div className=\"\" >\r\n          <div className=\"spinner-border text-dark\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n            showConfirmButton: false,\r\n            background: 'transparent',\r\n            timer: 1000\r\n        });\r\n        const dataRef = ref(db, '/admins');\r\n        get(dataRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const dataObject = snapshot.val();\r\n                    const dataKeys = Object.keys(dataObject);\r\n                    const dataEntries = dataKeys.map((key) => ({\r\n                        key,\r\n                        ...dataObject[key],\r\n                    }));\r\n                    dataEntries.sort((a, b) => a.rank - b.rank);\r\n                    setTableData(dataEntries);\r\n                    setFilteredData(dataEntries); // Initially, set filteredData to all data\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Details',\r\n            cell: (row) => (\r\n                <i className='bi bi-eye-fill' onClick={() => openModal(row)}></i>\r\n            ),\r\n            ignoreRowClick: true,\r\n            allowOverflow: true,\r\n            button: true,\r\n        },\r\n        {\r\n            name: 'UID',\r\n            selector: 'key',\r\n        },\r\n        {\r\n            name: ' Name',\r\n            selector: 'profile.name',\r\n        },\r\n\r\n        {\r\n            name: 'Phone',\r\n            selector: 'profile.phone',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Email',\r\n            selector: 'profile.email',\r\n            sortable: true,\r\n        },\r\n\r\n    ];\r\n\r\n    const paginationOptions = {\r\n        rowsPerPageText: 'Rows per page:',\r\n        rangeSeparatorText: 'of',\r\n    };\r\n\r\n\r\n    const handleSearch = (searchQuery) => {\r\n        let filteredItems = tableData;\r\n\r\n        if (searchQuery) {\r\n            filteredItems = filteredItems.filter((item) =>\r\n                item.profile.firstname.toLowerCase().includes(searchQuery.toLowerCase())\r\n            );\r\n        }\r\n\r\n        setFilteredData(filteredItems);\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className='sticky-top'>\r\n                <div className='d-flex flex-row justify-content-between'>\r\n                    <div className='fw-bold'>\r\n                        Admins\r\n                    </div>\r\n                    <div>\r\n                        <button className='' onClick={() => setaddadmin(!addadmin)}>Add Admin</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container mt-4 mb-2\">\r\n                    <div className='row'>\r\n                        <div className='col-md-6'>\r\n                            <div className='input-group'>\r\n                                <span className='input-group-text'><i className='bi bi-search'></i></span>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search admin name...\"\r\n                                    className='form-control'\r\n                                    value={searchText}\r\n                                    onChange={(e) => {\r\n                                        setSearchText(e.target.value);\r\n                                        handleSearch(e.target.value);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <div className='container mt-4 mb-2'>\r\n                <div className='row'>\r\n                    <div className='col-md-12'>\r\n                        <div className='table-responsive' style={{ overflowX: 'auto', height: \"70vh\" }}>\r\n                            <DataTable\r\n                                className=\"table table-bordered table-striped \"\r\n                                columns={columns}\r\n                                data={filteredData}\r\n                                pagination\r\n                                paginationComponentOptions={paginationOptions}\r\n                                highlightOnHover\r\n                                pointerOnHover\r\n                                striped\r\n                                paginationRowsPerPageOptions={[10, 25, 50, 100]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                isModalOpen && selectedRowData && (\r\n                    <div>\r\n                        <div\r\n                            className=\"modal d-block border-0\"\r\n                            role=\"dialog\"\r\n                            style={{\r\n                                display: 'block',\r\n                                background: 'rgba(0, 0, 0, 0.5)',\r\n                                backdropFilter: 'blur(3px)',\r\n                            }}\r\n                        >\r\n                            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n                                <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                                    <div className=\"modal-body\" >\r\n                                        <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                                            <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                                                Admin Info\r\n                                            </h5>\r\n                                            <h5 className='animate__animated animate__fadeInUp ' onClick={() => setModalOpen(false)}>\r\n                                                <i className=\"bi bi-x-circle-fill\"></i>\r\n                                            </h5>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div className='container border p-3 rounded-3'>\r\n                                                <div className='row'>\r\n                                                    <div className='col-md-6'>\r\n                                                        <label className='fw-bold'>UID:</label>\r\n                                                        <p> {selectedRowData.key}</p>\r\n                                                    </div>\r\n\r\n                                                    <div className='col-md-6'>\r\n                                                        <label className='fw-bold'> Name:</label>\r\n                                                        <p> {selectedRowData.profile.name}</p>\r\n                                                    </div>\r\n                                                    <div className='col-md-6'>\r\n                                                        <label className='fw-bold'>Phone:</label>\r\n                                                        <p> {selectedRowData.profile.phone}</p>\r\n                                                    </div>\r\n                                                    <div className='col-md-6'>\r\n                                                        <label className='fw-bold'>Email:</label>\r\n                                                        <p> {selectedRowData.profile.email}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            {\r\n                addadmin && (\r\n                    <div>\r\n                        <div\r\n                            className=\"modal d-block border-0\"\r\n                            role=\"dialog\"\r\n                            style={{\r\n                                display: 'block',\r\n                                background: 'rgba(0, 0, 0, 0.5)',\r\n                                backdropFilter: 'blur(3px)',\r\n                            }}\r\n                        >\r\n                            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n                                <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                                    <div className=\"modal-body\" >\r\n                                        <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                                            <h4 className=\"animate__animated animate__fadeInDown fw-bold\">\r\n                                                Add Admin\r\n                                            </h4>\r\n\r\n                                            <h5 className=\"animate__animated animate__fadeInUp \" onClick={() => setaddadmin(!addadmin)}>\r\n                                                <i className=\"bi bi-x-circle-fill\"></i>\r\n                                            </h5>\r\n                                        </div>\r\n                                        <div>\r\n\r\n                                            <Register getproducts={getproducts} setaddadmin={setaddadmin} />\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Admins","E:\\FCB\\admin\\src\\pages\\Users.jsx",["132","133","134","135","136","137","138","139"],[],"import React, { useEffect, useState } from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport AddProducts from './forms/AddProducts';\r\nimport { db, storage } from '../firebase';\r\nimport { child, get, ref, remove, update } from 'firebase/database';\r\nimport { deleteObject, ref as reference } from 'firebase/storage';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst Users = () => {\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [selectedRowData, setSelectedRowData] = useState(null);\r\n\r\n  const openModal = (rowData) => {\r\n    setSelectedRowData(rowData);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    const dataRef = ref(db, '/users');\r\n    get(dataRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const dataObject = snapshot.val();\r\n          const dataKeys = Object.keys(dataObject);\r\n          const dataEntries = dataKeys.map((key) => ({\r\n            key,\r\n            ...dataObject[key],\r\n          }));\r\n          dataEntries.sort((a, b) => a.rank - b.rank);\r\n          setTableData(dataEntries);\r\n          setFilteredData(dataEntries); // Initially, set filteredData to all data\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n  const getproducts = () => {\r\n\r\n    Swal.fire({\r\n      html: `\r\n        <div className=\"\" >\r\n          <div className=\"spinner-border text-dark\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n      showConfirmButton: false,\r\n      background: 'transparent',\r\n      timer: 1000\r\n    });\r\n    const dataRef = ref(db, '/users');\r\n    get(dataRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const dataObject = snapshot.val();\r\n          const dataKeys = Object.keys(dataObject);\r\n          const dataEntries = dataKeys.map((key) => ({\r\n            key,\r\n            ...dataObject[key],\r\n          }));\r\n          dataEntries.sort((a, b) => a.rank - b.rank);\r\n          setTableData(dataEntries);\r\n          setFilteredData(dataEntries); // Initially, set filteredData to all data\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Details',\r\n      cell: (row) => (\r\n        <i className='bi bi-eye-fill' onClick={() => openModal(row)}></i>\r\n      ),\r\n      ignoreRowClick: true,\r\n      allowOverflow: true,\r\n      button: true,\r\n    },\r\n    {\r\n      name: 'UID',\r\n      selector: 'key',\r\n    },\r\n    {\r\n      name: 'First Name',\r\n      selector: 'profile.firstname',\r\n    },\r\n    {\r\n      name: 'Last Name',\r\n      selector: 'profile.lastname',\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'profile.phone',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Email',\r\n      selector: 'profile.email',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'City',\r\n      selector: 'profile.city',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'State',\r\n      selector: 'profile.state',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Pincode',\r\n      selector: 'profile.pincode',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Address',\r\n      selector: 'profile.address',\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const paginationOptions = {\r\n    rowsPerPageText: 'Rows per page:',\r\n    rangeSeparatorText: 'of',\r\n  };\r\n\r\n\r\n  const handleSearch = (searchQuery) => {\r\n    let filteredItems = tableData;\r\n\r\n    if (searchQuery) {\r\n      filteredItems = filteredItems.filter((item) =>\r\n        item.profile.firstname.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n\r\n    setFilteredData(filteredItems);\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className='sticky-top'>\r\n        <div className='d-flex flex-row justify-content-between'>\r\n          <div className='fw-bold'>\r\n            Users\r\n          </div>\r\n          <div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"container mt-4 mb-2\">\r\n          <div className='row'>\r\n            <div className='col-md-6'>\r\n              <div className='input-group'>\r\n                <span className='input-group-text'><i className='bi bi-search'></i></span>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search user name...\"\r\n                  className='form-control'\r\n                  value={searchText}\r\n                  onChange={(e) => {\r\n                    setSearchText(e.target.value);\r\n                    handleSearch(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <div className='container mt-4 mb-2'>\r\n        <div className='row'>\r\n          <div className='col-md-12'>\r\n            <div className='table-responsive' style={{ overflowX: 'auto', height: \"70vh\" }}>\r\n              <DataTable\r\n                className=\"table table-bordered table-striped \"\r\n                columns={columns}\r\n                data={filteredData}\r\n                pagination\r\n                paginationComponentOptions={paginationOptions}\r\n                highlightOnHover\r\n                pointerOnHover\r\n                striped\r\n                paginationRowsPerPageOptions={[10, 25, 50, 100]}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {isModalOpen && selectedRowData && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(3px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\" >\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      User Info\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => setModalOpen(false)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div>\r\n                    <div className='container border p-3 rounded-3'>\r\n                      <div className='row'>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>UID:</label>\r\n                          <p> {selectedRowData.key}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>First Name:</label>\r\n                          <p> {selectedRowData.profile.firstname}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Last Name:</label>\r\n                          <p> {selectedRowData.profile.lastname}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Phone:</label>\r\n                          <p> {selectedRowData.profile.phone}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Email:</label>\r\n                          <p> {selectedRowData.profile.email}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>City:</label>\r\n                          <p> {selectedRowData.profile.city}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>State:</label>\r\n                          <p> {selectedRowData.profile.state}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Pincode:</label>\r\n                          <p> {selectedRowData.profile.pincode}</p>\r\n                        </div>\r\n\r\n                        <div className='col-md-12'>\r\n                          <label className='fw-bold'>Address</label>\r\n                          <p> {selectedRowData.profile.address}</p>\r\n                        </div>\r\n\r\n\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div>\r\n                  <div></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users","E:\\FCB\\admin\\src\\pages\\dashboard.jsx",["140","141","142"],[],"import React, { useEffect, useState } from 'react';\r\nimport { BsFillArchiveFill, BsFillGrid3X3GapFill, BsPeopleFill, BsCartFill } from 'react-icons/bs'\r\nimport { db } from '../firebase';\r\nimport { get, ref, limitToLast, orderByChild } from 'firebase/database';\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [productCount, setProductCount] = useState(0);\r\n    const [categoryCount, setCategoryCount] = useState(0);\r\n    const [customerCount, setCustomerCount] = useState(0);\r\n    const [orderCount, setOrderCount] = useState(0);\r\n    const [recentOrders, setRecentOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchDashboardData();\r\n        fetchRecentOrders();\r\n    }, []);\r\n\r\n\r\n    const fetchDashboardData = () => {\r\n        const productRef = ref(db, '/products');\r\n        get(productRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const products = snapshot.val();\r\n                    const productKeys = Object.keys(products);\r\n                    setProductCount(Object.keys(products).length);\r\n\r\n                    const categories = new Set();\r\n                    productKeys.forEach((key) => {\r\n                        categories.add(products[key].type);\r\n                    });\r\n                    setCategoryCount(categories.size);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching dashboard data:', error);\r\n            });\r\n\r\n        const orderRef = ref(db, '/orders');\r\n        get(orderRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const dataObject = snapshot.val();\r\n                    setOrderCount(Object.keys(dataObject).length);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n\r\n\r\n        const userRef = ref(db, '/users');\r\n        get(userRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const dataObject = snapshot.val();\r\n                    const dataKeys = Object.keys(dataObject);\r\n                    setCustomerCount(Object.keys(dataObject).length);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    };\r\n\r\n\r\n    const fetchRecentOrders = () => {\r\n        const orderRef = ref(db, '/orders');\r\n        get(orderRef)\r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    const dataObject = snapshot.val();\r\n                    const dataKeys = Object.keys(dataObject);\r\n                    const dataEntries = dataKeys.map((key) => ({\r\n                        key,\r\n                        ...dataObject[key],\r\n                    }));\r\n                    dataEntries.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate)); // Sort by order date in descending order\r\n                    setRecentOrders(dataEntries.slice(0, 10)); // Get the last ten orders\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching recent orders:', error);\r\n            });\r\n    };\r\n\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Order Date',\r\n            selector: 'orderDate',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'User ID',\r\n            selector: 'uid',\r\n        },\r\n        {\r\n            name: 'Total Amount',\r\n            selector: 'grandTotal',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Payment Method',\r\n            selector: 'paymentMethod',\r\n        },\r\n        {\r\n            name: 'Order Status',\r\n            selector: 'orderstatus',\r\n        },\r\n    ];\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <div className='main-title'>\r\n                <h3>Dashboard</h3>\r\n            </div>\r\n\r\n            <div className='main-cards'>\r\n                <div className='card'>\r\n                    <div className='card-inner'>\r\n                        <h3>PRODUCTS</h3>\r\n                        <BsFillArchiveFill className='card_icon' />\r\n                    </div>\r\n                    <h1>{productCount}</h1>\r\n                </div>\r\n                <div className='card'>\r\n                    <div className='card-inner'>\r\n                        <h3>CATEGORIES</h3>\r\n                        <BsFillGrid3X3GapFill className='card_icon' />\r\n                    </div>\r\n                    <h1>{categoryCount}</h1>\r\n                </div>\r\n                <div className='card'>\r\n                    <div className='card-inner'>\r\n                        <h3>CUSTOMERS</h3>\r\n                        <BsPeopleFill className='card_icon' />\r\n                    </div>\r\n                    <h1>{customerCount}</h1>\r\n                </div>\r\n                <div className='card'>\r\n                    <div className='card-inner'>\r\n                        <h3>ORDERS</h3>\r\n                        <BsCartFill className='card_icon' />\r\n                    </div>\r\n                    <h1>{orderCount}</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='pt-3'>\r\n                <h3>Recent Orders</h3>\r\n                <div style={{ overflowX: 'auto', height: \"70vh\" }}>\r\n                    <DataTable\r\n                        className=\"table table-bordered table-striped \"\r\n                        columns={columns}\r\n                        data={recentOrders}\r\n                        highlightOnHover\r\n                        pointerOnHover\r\n                        striped\r\n\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","E:\\FCB\\admin\\src\\pages\\Products.jsx",["143","144"],[],"import React, { useEffect, useState } from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport AddProducts from './forms/AddProducts';\r\nimport { db, storage } from '../firebase';\r\nimport { child, get, ref, remove, update } from 'firebase/database';\r\nimport { deleteObject, ref as reference } from 'firebase/storage';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst Products = () => {\r\n  const [addproduct, setaddproduct] = useState(false);\r\n  const [editproduct, seteditproduct] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [editdata, seteditdata] = useState({});\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [selectedRowData, setSelectedRowData] = useState(null);\r\n  const [selectedType, setSelectedType] = useState(''); // Define selectedType state\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const fetchProducts = () => {\r\n    const dataRef = ref(db, '/products');\r\n    get(dataRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const dataObject = snapshot.val();\r\n          const dataKeys = Object.keys(dataObject);\r\n          const dataEntries = dataKeys.map((key) => ({\r\n            key,\r\n            ...dataObject[key],\r\n          }));\r\n          dataEntries.sort((a, b) => a.rank - b.rank);\r\n          setTableData(dataEntries);\r\n          setFilteredData(dataEntries);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  };\r\n\r\n  const getproducts = () => {\r\n    fetchProducts(); // You can also directly call fetchProducts here\r\n  };\r\n\r\n\r\n  const handleEdit = (row) => {\r\n    seteditproduct(true);\r\n    seteditdata(row);\r\n  };\r\n\r\n  const handleDelete = (key, imageURL) => {\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: 'You will not be able to recover this product!',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#d33',\r\n      cancelButtonColor: '#3085d6',\r\n      confirmButtonText: 'Yes, delete it!',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        Swal.fire({\r\n          html: `\r\n                        <div className=\"\" >\r\n                            <div className=\"spinner-border text-dark\" role=\"status\">\r\n                                <span className=\"visually-hidden\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n                    `,\r\n          showConfirmButton: false,\r\n          background: 'transparent',\r\n        });\r\n\r\n        const productImageRef = reference(storage, imageURL);\r\n\r\n        deleteObject(productImageRef)\r\n          .then(() => {\r\n            deleteProduct(key);\r\n          })\r\n          .catch((error) => {\r\n            Swal.fire('Deleted!', 'The product has been deleted.', 'error');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteProduct = (key) => {\r\n    const updatedData = filteredData.filter((item) => item.key !== key);\r\n    setFilteredData(updatedData);\r\n    const productRef = ref(db, `products/${key}`);\r\n    remove(productRef);\r\n    Swal.fire('Deleted!', 'The product has been deleted.', 'success');\r\n  };\r\n\r\n  const handleEditSave = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { key, ...updateddetails } = editdata;\r\n    const productRef = ref(db, `products/${editdata.key}`);\r\n\r\n    update(productRef, updateddetails)\r\n      .then(() => {\r\n        Swal.fire('Updated', 'The product has been updated', 'success');\r\n        seteditdata(null);\r\n        seteditproduct(!editproduct);\r\n        fetchProducts();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating product:', error);\r\n        Swal.fire('Error', 'An error occurred while updating the product', 'error');\r\n      });\r\n  };\r\n\r\n  const handleStockUpdate = (key, newStock) => {\r\n    const productRef = ref(db, `products/${key}`);\r\n    update(productRef, { stock: newStock })\r\n      .then(() => {\r\n        Swal.fire('Stock Updated', 'The stock has been updated successfully', 'success');\r\n        fetchProducts();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating stock:', error);\r\n        Swal.fire('Error', 'An error occurred while updating the stock', 'error');\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Rank',\r\n      selector: 'rank',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Image',\r\n      cell: (row) => <img src={row.imageURL} alt=\"Product\" className=\"img-fluid\" height={100} width={100} loading=\"lazy\" />,\r\n    },\r\n    {\r\n      name: 'Type',\r\n      selector: 'type',\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n    },\r\n    {\r\n      name: 'Price',\r\n      selector: (row) => `₹ ${row.price}`,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Stock',\r\n      selector: 'stock',\r\n      cell: (row) => (\r\n        <input\r\n          type=\"number\"\r\n          value={row.stock}\r\n          onChange={(e) => handleStockUpdate(row.key, e.target.value)}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: 'Action',\r\n      cell: (row) => (\r\n        <div className=\"d-flex flex-row\">\r\n          <i className=\"bi bi-pencil-square pe-3\" onClick={() => handleEdit(row)}></i>\r\n          <i className=\"bi bi-trash-fill px-3\" onClick={() => handleDelete(row.key, row.imageURL)}></i>\r\n          <i className=\"bi bi-eye-fill px-3\" onClick={() => openModal(row)}></i>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const paginationOptions = {\r\n    rowsPerPageText: 'Rows per page:',\r\n    rangeSeparatorText: 'of',\r\n  };\r\n\r\n  const handleSearch = (searchQuery, selectedType) => {\r\n    let filteredItems = tableData;\r\n\r\n    if (searchQuery) {\r\n      filteredItems = filteredItems.filter((item) =>\r\n        item.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (selectedType) {\r\n      filteredItems = filteredItems.filter((item) =>\r\n        item.type.toLowerCase() === selectedType.toLowerCase()\r\n      );\r\n    }\r\n\r\n    setFilteredData(filteredItems);\r\n  };\r\n\r\n  const openModal = (rowData) => {\r\n    setSelectedRowData(rowData);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const uniqueProductTypes = [...new Set(tableData.map(product => product.type))];\r\n  return (\r\n    <div>\r\n\r\n      <div className='sticky-top'>\r\n        <div className='d-flex flex-row justify-content-between'>\r\n          <div className='fw-bold'>\r\n            Products\r\n          </div>\r\n          <div>\r\n            <button className='' onClick={() => setaddproduct(!addproduct)}>Add Products</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"container mt-4 mb-2\">\r\n          <div className='row'>\r\n            <div className='col-md-6'>\r\n              <div className='input-group'>\r\n                <span className='input-group-text'><i className='bi bi-search'></i></span>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search product name...\"\r\n                  className='form-control'\r\n                  value={searchText}\r\n                  onChange={(e) => {\r\n                    setSearchText(e.target.value);\r\n                    handleSearch(e.target.value, selectedType);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className='col-md-6 m-lg-0 my-3'>\r\n              <select\r\n                value={selectedType}\r\n                onChange={(e) => {\r\n                  setSelectedType(e.target.value);\r\n                  handleSearch(searchText, e.target.value);\r\n                }}\r\n                className='form-select'\r\n              >\r\n                <option value=\"\">All Types</option>\r\n                {/* Dynamically generate options based on unique product types */}\r\n                {uniqueProductTypes.map(type => (\r\n                  <option key={type} value={type}>{type}</option>\r\n                ))}\r\n              </select>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className='container mt-4 mb-2'>\r\n        <div className='row'>\r\n          <div className='col-md-12'>\r\n            <div style={{ overflowX: 'auto', height: \"70vh\" }}>\r\n              <DataTable\r\n                className=\"table table-bordered table-striped \"\r\n                columns={columns}\r\n                data={filteredData}\r\n                pagination\r\n                paginationComponentOptions={paginationOptions}\r\n                highlightOnHover\r\n                pointerOnHover\r\n                striped\r\n                paginationRowsPerPageOptions={[10, 25, 50, 100]}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      {addproduct && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(3px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\" >\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      Add Product\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => setaddproduct(!addproduct)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div >\r\n                    <AddProducts getproducts={getproducts} setaddproduct={setaddproduct} />\r\n                  </div>\r\n                  <div></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n      {editproduct && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(10px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\" >\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      Edit Product\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => seteditproduct(!editproduct)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div>\r\n                    <form>\r\n                      <div className='row mt-4'>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"name\" className=\"form-label fw-bold\">Product Name</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"input-field\"\r\n                            id=\"name\"\r\n                            value={editdata.name}\r\n                            onChange={(e) => seteditdata({ ...editdata, name: e.target.value })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"type\" className=\"form-label fw-bold\">Product Type</label>\r\n                          <input\r\n                            className=\"input-field\"\r\n                            id=\"type\"\r\n                            value={editdata.type}\r\n                            onChange={(e) => seteditdata({ ...editdata, type: e.target.value })}\r\n                          >\r\n                          </input>\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"price\" className=\"form-label fw-bold\">Product Price</label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input-field\"\r\n                            id=\"price\"\r\n                            value={editdata.price}\r\n                            onChange={(e) => seteditdata({ ...editdata, price: e.target.value })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"stock\" className=\"form-label fw-bold\">Product Stock</label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input-field\"\r\n                            id=\"stock\"\r\n                            value={editdata.stock}\r\n                            onChange={(e) => seteditdata({ ...editdata, stock: e.target.value })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"rank\" className=\"form-label fw-bold\">Product Rank</label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input-field\"\r\n                            id=\"rank\"\r\n                            value={editdata.rank}\r\n                            onChange={(e) => seteditdata({ ...editdata, rank: e.target.value })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-3\">\r\n                          <label htmlFor=\"rank\" className=\"form-label fw-bold\">Product Description</label>\r\n                          <textarea\r\n                            type=\"number\"\r\n                            className=\"input-field\"\r\n                            id=\"info\"\r\n                            rows=\"30\"\r\n                            cols=\"10\"\r\n                            value={editdata.info}\r\n                            onChange={(e) => seteditdata({ ...editdata, info: e.target.value })}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className='text-center '>\r\n                      <button className=\"submit my-3\" onClick={handleEditSave}>Save</button>\r\n                      </div>\r\n                     \r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {isModalOpen && selectedRowData && (\r\n        <div>\r\n          <div\r\n            className=\"modal d-block border-0\"\r\n            role=\"dialog\"\r\n            style={{\r\n              display: 'block',\r\n              background: 'rgba(0, 0, 0, 0.5)',\r\n              backdropFilter: 'blur(3px)',\r\n            }}\r\n          >\r\n            <div className=\"modal-dialog modal-lg border-0 modal-dialog-centered \">\r\n              <div className=\"modal-content text-bg-green border-0 rounded-4\">\r\n                <div className=\"modal-body\" >\r\n                  <div className='d-flex flex-row justify-content-between pb-3'>\r\n\r\n                    <h5 className='animate__animated animate__fadeInDown text-center fw-bold'>\r\n                      Product Info\r\n                    </h5>\r\n                    <h5 className='animate__animated animate__fadeInUp ' onClick={() => setModalOpen(false)}>\r\n                      <i className=\"bi bi-x-circle-fill\"></i>\r\n                    </h5>\r\n                  </div>\r\n                  <div>\r\n                    <div className='container border px-3 rounded-3'>\r\n                      <div className='row'>\r\n                        <div className='col-md-12 d-flex flex-row justify-content-center pb-3'>\r\n                          <img className='img-fluid' src={selectedRowData.imageURL} width={200} loading='lazy' />\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product ID:</label>\r\n                          <p> {selectedRowData.key}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product Name:</label>\r\n                          <p> {selectedRowData.name}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product Price:</label>\r\n                          <p>₹ {selectedRowData.price}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product Type:</label>\r\n                          <p> {selectedRowData.type}</p>\r\n                        </div>\r\n                        <div className='col-md-6'>\r\n                          <label className='fw-bold'>Product Description:</label>\r\n                          <p> {selectedRowData.info}</p>\r\n                        </div>\r\n\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Products\r\n","E:\\FCB\\admin\\src\\components\\Navbar.jsx",["145","146","147","148"],[],"import React from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { auth } from '../firebase';\r\nimport \r\n{BsGrid1X2Fill, BsFillArchiveFill, BsFillGrid3X3GapFill, BsPeopleFill, \r\n  BsListCheck, BsMenuButtonWideFill, BsFillGearFill, BsPersonCircle,BsCartFill}\r\n from 'react-icons/bs'\r\n\r\nconst Navbar = ({ componentrender, component }) => {\r\n    const logout = async () => {\r\n        Swal.fire({\r\n            html: `\r\n        <div className=\"p-5\">\r\n          <div className=\"spinner-border text-dark\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n            showConfirmButton: false,\r\n            background: 'transparent',\r\n        });\r\n\r\n        try {\r\n            await auth.signOut();\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'Logout Successful',\r\n                showConfirmButton: true,\r\n                confirmButtonColor: '#212529',\r\n            });\r\n        } catch (error) {\r\n            // Handle error\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"sidebar\">\r\n            <div className=\"d-lg-block d-none\">\r\n                <div className=\"vh-100 d-flex flex-column justify-content-between py-4 pe-3 border-end ps-4 position-fixed\">\r\n                    <div className=\"sidebar-list d-flex flex-column gap-4\">\r\n                        <img className=\"pb-3\" src=\"https://firebasestorage.googleapis.com/v0/b/sivaraj-stores.appspot.com/o/productimages%2FFCB_Logo.png?alt=media&token=6e559136-9766-4122-a7e8-24727c6479a8\" width=\"50px\" border-radius=\"20px\" alt=\"Logo\" />\r\n                        <h5 className={` ${component === 'Dashboard' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Dashboard')}>\r\n                        <BsGrid1X2Fill className='icon'/>  Dashboard\r\n                        </h5>\r\n                        <h5 className={` ${component === 'Products' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Products')}>\r\n                        <BsFillArchiveFill className='icon'/>  Products\r\n                        </h5>\r\n                        <h5 className={` ${component === 'Orders' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Orders')}>\r\n                        <BsCartFill className='icon'/>   Orders\r\n                        </h5>\r\n                        <h5 className={` ${component === 'Users' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Users')}>\r\n                        <BsPeopleFill className='icon'/> Users\r\n                        </h5>\r\n                        <h5 className={` ${component === 'Profile' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Profile')}>\r\n                        <BsPersonCircle className='icon'/> Profile\r\n                        </h5>\r\n                        <h5 className={` ${component === 'Admins' ? 'text-coral' : ''} sidebar-list-item`} onClick={() => componentrender('Admins')}>\r\n                        <BsPeopleFill className='icon'/>   Admins\r\n                        </h5>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                        <button className=\"\" onClick={() => logout()}>\r\n                            Logout\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","E:\\FCB\\admin\\src\\pages\\auth\\ForgotPassword.jsx",["149"],[],"import { sendPasswordResetEmail } from 'firebase/auth';\r\nimport React, { useState } from 'react'\r\nimport { auth } from '../../firebase';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst ForgotPassword = ({ componentrender }) => {\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n    });\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const sendpasswordresetmail = (e) => {\r\n        e.preventDefault()\r\n        Swal.fire({\r\n            html: `\r\n        <div class=\"p-5\" >\r\n          <div class=\"spinner-border text-dark\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n            showConfirmButton: false,\r\n            background: 'transparent',\r\n        });\r\n\r\n        sendPasswordResetEmail(auth, formData.email)\r\n            .then(() => {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Password Reset Mail Sent Successfully! Check your mail box',\r\n                    showConfirmButton: true, confirmButtonColor: 'black',\r\n                })\r\n\r\n            })\r\n\r\n            .catch((error) => {\r\n                const errorCode = error.code;\r\n                Swal.fire({\r\n                    icon: \"warning\",\r\n                    title: errorCode,\r\n                    showConfirmButton: true, confirmButtonColor: 'black', confirmButtonColor: 'black',\r\n                    timer: 3000\r\n                })\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='d-flex flex-column justify-content-center vh-100 px-4'>\r\n\r\n            <div className='d-flex flex-row justify-content-center'>\r\n                <div className='w-100 max-width-password '>\r\n                    <div className='d-flex flex-row justify-content-between py-2 animate__animated animate__zoomIn'>\r\n                        <label className='mb-2 ps-1 fw-bold animate__animated text-coral animate__zoomIn  '>Forgot Password ?</label>\r\n                        <h5 className='animate__animated animate__zoomIn' onClick={() => componentrender(\"Login\")}><i className=\"bi bi-x-lg\"></i></h5>\r\n                    </div>\r\n                    <form onSubmit={sendpasswordresetmail}>\r\n                        <div className='animate__animated animate__zoomIn'>\r\n                            <div className=\"input-box\">\r\n                                <input\r\n                                    name='email' className=\"input-field\" value={formData.email} onChange={handleChange} placeholder='Enter your Email' type='email' required\r\n                                />\r\n                                <i className=\"fa fa-user\" aria-hidden=\"true\" />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <button className='submit w-100 animate__animated animate__zoomIn ' type='submit'>Send Password Reset Link</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword","E:\\FCB\\admin\\src\\pages\\auth\\Login.jsx",["150","151","152","153"],[],"import React, { useState } from 'react';\r\nimport { auth, db } from '../../firebase';\r\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport Swal from 'sweetalert2';\r\nimport { get, onValue, ref, serverTimestamp, set } from 'firebase/database';\r\nimport Register from './Register';\r\n\r\nconst LoginOrRegister = ({ componentrender }) => {\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    phone: '',\r\n    isRegistering: false,\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleToggleForm = () => {\r\n    setFormData({ ...formData, isRegistering: !formData.isRegistering });\r\n  };\r\n\r\n  const handleLoginSubmit = async (e) => {\r\n    e.preventDefault();\r\n    Swal.fire({\r\n      html: `\r\n        <div class=\"p-5\">\r\n          <div class=\"spinner-border text-dark\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n      showConfirmButton: false,\r\n      background: 'transparent',\r\n    });\r\n\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, formData.email, formData.password);\r\n      const user = userCredential.user;\r\n      const uid = user.uid;\r\n      const userRef = ref(db, 'admins/' + uid);\r\n\r\n      const snapshot = await get(userRef);\r\n\r\n      if (snapshot.exists()) {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Logged in Successfully',\r\n          showConfirmButton: true,\r\n          timer: 3000\r\n        });\r\n        componentrender(\"Engine\")\r\n      } else {\r\n        auth.signOut();\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Email or Password is Wrong',\r\n          showConfirmButton: true,\r\n          timer: 3000\r\n        });\r\n        componentrender(\"Login\")\r\n      }\r\n    } catch (error) {\r\n      const errorCode = error.code;\r\n      if (errorCode === 'auth/wrong-password' || errorCode === 'auth/invalid-login-credentials') {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Email or Password is Wrong',\r\n          showConfirmButton: true,\r\n          timer: 3000\r\n        });\r\n      } else {\r\n        auth.signOut();\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Email or Password is Wrong',\r\n          showConfirmButton: true,\r\n          timer: 3000\r\n        });\r\n        componentrender(\"Login\")\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRegisterSubmit = async (e) => {\r\n    e.preventDefault();\r\n    Swal.fire({\r\n      html: `\r\n        <div class=\"p-5\" >\r\n          <div class=\"spinner-border text-dark\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      `,\r\n      showConfirmButton: false,\r\n      background: 'transparent',\r\n    });\r\n\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, formData.email, formData.password);\r\n      const user = userCredential.user;\r\n\r\n      const profile = {\r\n        name: formData.name,\r\n        email: formData.email,\r\n        phone: formData.phone,\r\n        accountcreatedat: serverTimestamp(),\r\n      }\r\n\r\n      set(ref(db, 'admins/' + user.uid), {\r\n        profile\r\n      });\r\n\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Successfully Registered',\r\n        showConfirmButton: true,\r\n        confirmButtonColor: 'black',\r\n      });\r\n    } catch (error) {\r\n      const errorCode = error.code;\r\n      if (errorCode === \"auth/email-already-in-use\") {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Account Already Exists',\r\n          showConfirmButton: true,\r\n          confirmButtonColor: 'black',\r\n          timer: 1500\r\n        });\r\n      } else if (errorCode === \"auth/invalid-email\") {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Invalid Email',\r\n          showConfirmButton: true,\r\n          confirmButtonColor: 'black',\r\n          timer: 3000\r\n        });\r\n      } else if (errorCode === \"auth/operation-not-allowed\") {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Operation Not Allowed',\r\n          showConfirmButton: true,\r\n          confirmButtonColor: 'black',\r\n          timer: 1500\r\n        });\r\n      } else if (errorCode === \"auth/weak-password\") {\r\n        Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Your Password is too Weak',\r\n          showConfirmButton: true,\r\n          confirmButtonColor: 'black',\r\n          timer: 1500\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='d-flex flex-column justify-content-center vh-100'>\r\n      <div className='text-center fw-bold'>\r\n      </div>\r\n      {/* <div className=\"text-center\">\r\n        <button onClick={handleToggleForm}>\r\n          {formData.isRegistering ? 'Switch to Login' : 'Switch to Register'}\r\n        </button>\r\n      </div> */}\r\n      <div className='d-flex flex-row justify-content-center my-3'>\r\n        <form onSubmit={formData.isRegistering ? handleRegisterSubmit : handleLoginSubmit}>\r\n          <section className=\"login-container\" id=\"login\">\r\n            <header className=\"py-0 \">{formData.isRegistering ? 'Register' : 'Admin Login'}</header>\r\n            <hr className=\"mx-auto\" />\r\n            {formData.isRegistering ? (\r\n              <div>\r\n                <div className=\"input-box\">\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"registerFirstName\"\r\n                    className=\"input-field\"\r\n                    placeholder=\"Name\"\r\n                    name=\"name\"\r\n                    onChange={handleChange}\r\n                    value={formData.name}\r\n                    required\r\n                  />\r\n                  <i className=\"fa fa-user\" aria-hidden=\"true\" />\r\n                </div>\r\n                <div className=\"input-box\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"phone\"\r\n                    className=\"input-field\"\r\n                    placeholder=\"Mobile No\"\r\n                    value={formData.phone}\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                  <i className=\"fa fa-phone\" aria-hidden=\"true\" />\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            <div className=\"input-box pt-4\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"loginUsername\"\r\n                className=\"input-field\"\r\n                placeholder=\"Username or Email\"\r\n                onChange={handleChange}\r\n                value={formData.email}\r\n                name='email'\r\n                required\r\n              />\r\n              <i className=\"fa fa-user\" aria-hidden=\"true\" />\r\n              <p className=\"error-message\" id=\"loginError\" />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <input\r\n                type=\"password\"\r\n                id=\"loginPassword\"\r\n                className=\"input-field\"\r\n                placeholder=\"Password\"\r\n                onChange={handleChange}\r\n                value={formData.password}\r\n                name='password'\r\n                required\r\n              />\r\n              <i className=\"fa fa-lock\" aria-hidden=\"true\" />\r\n              <p className=\"error-message\" id=\"passError\" />\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <p className=\"fw-bold\">\r\n                <a onClick={() => componentrender(\"ForgotPassword\")}>Forgot password?</a>\r\n              </p>\r\n            </div>\r\n            <div className=\"input-box px-5 text-center\">\r\n              <button type=\"submit\" className=\"submit\">\r\n                {formData.isRegistering ? 'Register' : 'Sign In'}\r\n              </button>\r\n            </div>\r\n          </section>\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginOrRegister;\r\n","E:\\FCB\\admin\\src\\pages\\auth\\Register.jsx",[],[],"E:\\FCB\\admin\\src\\pages\\forms\\AddProducts.jsx",["154","155"],[],"import React, { useRef, useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { db, storage } from '../../firebase';\r\nimport { ref as reference, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { push, ref } from 'firebase/database';\r\n\r\nfunction generateRandomString(length) {\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        result += characters.charAt(randomIndex);\r\n    }\r\n    return result;\r\n}\r\n\r\nconst AddProducts = ({ setaddproduct, getproducts }) => {\r\n    const productname = useRef();\r\n    const productprice = useRef();\r\n    const productstock = useRef();\r\n    const producttype = useRef();\r\n    const productrank = useRef();\r\n    const productinfo = useRef();\r\n    const [file, setFiles] = useState([]);\r\n    const [additem, setitem] = useState(false);\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFiles = e.target.files[0];\r\n        setFiles(selectedFiles);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        Swal.fire({\r\n            html: `\r\n                <div className=\"\">\r\n                    <div className=\"spinner-border text-dark\" role=\"status\">\r\n                        <span className=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            `,\r\n            showConfirmButton: false,\r\n            background: 'transparent',\r\n        });\r\n\r\n        try {\r\n            if (!file) {\r\n                throw new Error(\"Please select a product image.\");\r\n            }\r\n\r\n            const filename = generateRandomString(15);\r\n            const imageRef = reference(storage, 'productimages/' + filename);\r\n            await uploadBytes(imageRef, file);\r\n            const downloadURL = await getDownloadURL(imageRef);\r\n\r\n            const productpath = ref(db, 'products');\r\n            const product = {\r\n                name: productname.current.value,\r\n                price: productprice.current.value,\r\n                rank: productrank.current.value,\r\n                type: producttype.current.value,\r\n                stock: parseInt(productstock.current.value), // Convert to integer\r\n                info: productinfo.current.value,\r\n                imageURL: downloadURL,\r\n            };\r\n            push(productpath, product);\r\n\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'Product Upload Successful',\r\n                showConfirmButton: true,\r\n                confirmButtonColor: 'black',\r\n            });\r\n\r\n            // Reset form fields and hide loading spinner\r\n            productname.current.value = \"\";\r\n            productrank.current.value = \"\";\r\n            producttype.current.value = \"\";\r\n            productprice.current.value = \"\";\r\n            productinfo.current.value = \"\";\r\n            productstock.current.value = \"\"; // Reset stock input\r\n            setFiles([]);\r\n            setaddproduct();\r\n            getproducts();\r\n        } catch (error) {\r\n            console.error(\"Error uploading file:\", error);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Product Upload Unsuccessful',\r\n                text: error.message,\r\n                showConfirmButton: true,\r\n                confirmButtonColor: 'black',\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit} className=''>\r\n                <div className='row mt-4'>\r\n                    <div className='col-md-6 mb-3'>\r\n                        <label className='mb-2 fw-bold'>Product Image</label>\r\n                        <input\r\n                            accept=\"image/*\"\r\n                            type=\"file\"\r\n                            onChange={handleFileChange}\r\n                            className=\"input-field\"\r\n                            style={{ paddingTop: \"12px\" }}\r\n                            required\r\n                            id=\"image\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-md-6 mb-3'>\r\n                        <label className='mb-2 fw-bold'>Product Name</label>\r\n                        <input className='input-field' placeholder='Product Name' ref={productname} required />\r\n                    </div>\r\n                    <div className='col-md-6 mb-3'>\r\n                        <label className='mb-2 fw-bold'>Product Stock</label>\r\n                        <input className='input-field' placeholder='Product Stock' ref={productstock} type=\"number\" min=\"0\" required />\r\n                    </div>\r\n                    <div className='col-md-6 mb-3'>\r\n                        <label className='mb-2 fw-bold'>Product Price</label>\r\n                        <input className='input-field' placeholder='Product Price' ref={productprice} type=\"number\" min=\"0\" required />\r\n                    </div>\r\n                    <div className='col-md-6 mb-3'>\r\n                        <label className='mb-2 fw-bold'>Product Type</label>\r\n                        <input className='input-field' placeholder='Product Type' ref={producttype} required />\r\n                    </div>\r\n                    <div className='col-md-6 mb-4 fw-bold'>\r\n                        <label className='mb-2'>Product Rank</label>\r\n                        <input className='input-field' placeholder='Product Rank' ref={productrank} required />\r\n                    </div>\r\n                    <div className='col-md-6 mb-4 fw-bold'>\r\n                        <label className='mb-2'>Product Description</label>\r\n                        <textarea className='input-field pt-2' ref={productinfo} required rows={5}></textarea>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className='col-md-12 mb-4 px-5 text-center'>\r\n                    <button className='submit' type='submit'>Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddProducts;\r\n",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":26},{"ruleId":"168","severity":1,"message":"172","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":6,"column":15,"nodeType":"170","messageId":"171","endLine":6,"endColumn":22},{"ruleId":"168","severity":1,"message":"174","line":14,"column":12,"nodeType":"170","messageId":"171","endLine":14,"endColumn":27},{"ruleId":"168","severity":1,"message":"175","line":15,"column":12,"nodeType":"170","messageId":"171","endLine":15,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":71,"column":9,"nodeType":"178","messageId":"179","endLine":79,"endColumn":10},{"ruleId":"168","severity":1,"message":"180","line":84,"column":12,"nodeType":"170","messageId":"171","endLine":84,"endColumn":26},{"ruleId":"168","severity":1,"message":"181","line":86,"column":11,"nodeType":"170","messageId":"171","endLine":86,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":26},{"ruleId":"168","severity":1,"message":"182","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":15,"column":9,"nodeType":"178","messageId":"179","endLine":28,"endColumn":10},{"ruleId":"168","severity":1,"message":"183","line":3,"column":14,"nodeType":"170","messageId":"171","endLine":3,"endColumn":21},{"ruleId":"168","severity":1,"message":"184","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":4,"column":27,"nodeType":"170","messageId":"171","endLine":4,"endColumn":33},{"ruleId":"168","severity":1,"message":"186","line":59,"column":9,"nodeType":"170","messageId":"171","endLine":59,"endColumn":19},{"ruleId":"168","severity":1,"message":"187","line":68,"column":24,"nodeType":"170","messageId":"171","endLine":68,"endColumn":39},{"ruleId":"168","severity":1,"message":"188","line":298,"column":9,"nodeType":"170","messageId":"171","endLine":298,"endColumn":31},{"ruleId":"168","severity":1,"message":"189","line":329,"column":10,"nodeType":"170","messageId":"171","endLine":329,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":523,"column":27,"nodeType":"192","endLine":523,"endColumn":114},{"ruleId":"168","severity":1,"message":"193","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":19},{"ruleId":"168","severity":1,"message":"183","line":4,"column":14,"nodeType":"170","messageId":"171","endLine":4,"endColumn":21},{"ruleId":"168","severity":1,"message":"184","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":5,"column":27,"nodeType":"170","messageId":"171","endLine":5,"endColumn":33},{"ruleId":"168","severity":1,"message":"194","line":5,"column":35,"nodeType":"170","messageId":"171","endLine":5,"endColumn":41},{"ruleId":"168","severity":1,"message":"195","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":22},{"ruleId":"168","severity":1,"message":"196","line":6,"column":31,"nodeType":"170","messageId":"171","endLine":6,"endColumn":40},{"ruleId":"168","severity":1,"message":"193","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":19},{"ruleId":"168","severity":1,"message":"183","line":4,"column":14,"nodeType":"170","messageId":"171","endLine":4,"endColumn":21},{"ruleId":"168","severity":1,"message":"184","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"168","severity":1,"message":"185","line":5,"column":27,"nodeType":"170","messageId":"171","endLine":5,"endColumn":33},{"ruleId":"168","severity":1,"message":"194","line":5,"column":35,"nodeType":"170","messageId":"171","endLine":5,"endColumn":41},{"ruleId":"168","severity":1,"message":"195","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":22},{"ruleId":"168","severity":1,"message":"196","line":6,"column":31,"nodeType":"170","messageId":"171","endLine":6,"endColumn":40},{"ruleId":"168","severity":1,"message":"197","line":46,"column":9,"nodeType":"170","messageId":"171","endLine":46,"endColumn":20},{"ruleId":"168","severity":1,"message":"198","line":4,"column":20,"nodeType":"170","messageId":"171","endLine":4,"endColumn":31},{"ruleId":"168","severity":1,"message":"199","line":4,"column":33,"nodeType":"170","messageId":"171","endLine":4,"endColumn":45},{"ruleId":"168","severity":1,"message":"200","line":60,"column":27,"nodeType":"170","messageId":"171","endLine":60,"endColumn":35},{"ruleId":"168","severity":1,"message":"184","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":15},{"ruleId":"190","severity":1,"message":"191","line":444,"column":27,"nodeType":"192","endLine":444,"endColumn":114},{"ruleId":"168","severity":1,"message":"201","line":5,"column":36,"nodeType":"170","messageId":"171","endLine":5,"endColumn":56},{"ruleId":"168","severity":1,"message":"202","line":6,"column":3,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"203","line":6,"column":16,"nodeType":"170","messageId":"171","endLine":6,"endColumn":36},{"ruleId":"168","severity":1,"message":"204","line":6,"column":38,"nodeType":"170","messageId":"171","endLine":6,"endColumn":52},{"ruleId":"205","severity":1,"message":"206","line":46,"column":75,"nodeType":"207","messageId":"208","endLine":46,"endColumn":93},{"ruleId":"168","severity":1,"message":"173","line":5,"column":15,"nodeType":"170","messageId":"171","endLine":5,"endColumn":22},{"ruleId":"168","severity":1,"message":"209","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":16},{"ruleId":"168","severity":1,"message":"210","line":22,"column":9,"nodeType":"170","messageId":"171","endLine":22,"endColumn":25},{"ruleId":"211","severity":1,"message":"212","line":234,"column":17,"nodeType":"192","endLine":234,"endColumn":70},{"ruleId":"168","severity":1,"message":"213","line":26,"column":12,"nodeType":"170","messageId":"171","endLine":26,"endColumn":19},{"ruleId":"168","severity":1,"message":"214","line":26,"column":21,"nodeType":"170","messageId":"171","endLine":26,"endColumn":28},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["215"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Engine' is defined but never used.","'onValue' is defined but never used.","'loggedindetails' is assigned a value but never used.","'loggedinuid' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'currentproduct' is assigned a value but never used.","'fitcomponent' is assigned a value but never used.","'ScrollToTop' is defined but never used.","'storage' is defined but never used.","'child' is defined but never used.","'remove' is defined but never used.","'formatDate' is assigned a value but never used.","'setSelectedType' is assigned a value but never used.","'calculatePriceAfterGST' is assigned a value but never used.","'userDetails' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AddProducts' is defined but never used.","'update' is defined but never used.","'deleteObject' is defined but never used.","'reference' is defined but never used.","'getproducts' is assigned a value but never used.","'limitToLast' is defined but never used.","'orderByChild' is defined but never used.","'dataKeys' is assigned a value but never used.","'BsFillGrid3X3GapFill' is defined but never used.","'BsListCheck' is defined but never used.","'BsMenuButtonWideFill' is defined but never used.","'BsFillGearFill' is defined but never used.","no-dupe-keys","Duplicate key 'confirmButtonColor'.","ObjectExpression","unexpected","'Register' is defined but never used.","'handleToggleForm' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'additem' is assigned a value but never used.","'setitem' is assigned a value but never used.","no-object-constructor"]